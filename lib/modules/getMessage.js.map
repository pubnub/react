{"version":3,"sources":["modules/getMessage.js"],"names":["getMessage","init","component","channel","state","pn_messages","setState","prevState","$merge","emit","instance","message","_component","$push","_broadcast","callback","_autoload","getHistory","_listener","subscription","isSubscribe"],"mappings":";;;;;QA2CgBA,U,GAAAA,U;;AA3ChB;;;;;;;;AASA,SAASC,IAAT,CAAcC,SAAd,EAAyBC,OAAzB,EAAkC;AAChC,MAAID,UAAUE,KAAV,CAAgBC,WAAhB,CAA4BF,OAA5B,CAAJ,EAA0C;AACxC,WAAO,KAAP;AACD,GAFD,MAEO;AACLD,cAAUI,QAAV,CAAmB;AAAA,aAAc;AAC/BD,qBAAa,kCAAOE,UAAUF,WAAjB,EAA8B,EAAEG,4BAAWL,OAAX,EAAqB,EAArB,CAAF,EAA9B;AADkB,OAAd;AAAA,KAAnB;;AAIA,WAAO,IAAP;AACD;AACF;;AASD,SAASM,IAAT,CAAcC,QAAd,EAAwBP,OAAxB,EAAiCQ,OAAjC,EAA0C;AACxCD,WAASE,UAAT,CAAoBN,QAApB,CAA6B;AAAA,WAAc;AACzCD,mBAAa,kCAAOE,UAAUF,WAAjB,sBAAiCF,OAAjC,EAA2C,EAAEU,OAAO,CAACF,OAAD,CAAT,EAA3C;AAD4B,KAAd;AAAA,GAA7B;;AAIAD,WAASI,UAAT,CAAoBL,IAApB,CAAyB,SAAzB,EAAoCN,OAApC,EAA6CQ,OAA7C;AACD;;AASM,SAASX,UAAT,CAAoBG,OAApB,EAA6BY,QAA7B,EAAuC;AAAA;;AAC5C,MAAIb,YAAY,KAAKU,UAArB;;AAEA,MAAIX,KAAKC,SAAL,EAAgBC,OAAhB,CAAJ,EAA8B;AAC5B,SAAKa,SAAL,CAAeC,UAAf,CAA0Bd,OAA1B,EAAmCY,QAAnC;AACD;;AAED,OAAKD,UAAL,CAAgBH,OAAhB,CAAwBR,OAAxB,EAAiCY,QAAjC;;AAEA,MAAI,CAAC,KAAKG,SAAL,CAAeP,OAApB,EAA6B;AAC3B,SAAKO,SAAL,CAAeP,OAAf,GAAyB,UAACA,OAAD,EAAa;AACpC,UAAIA,QAAQQ,YAAR,IAAwB,MAAKL,UAAL,CAAgBM,WAAhB,CAA4B,SAA5B,EAAuCT,QAAQQ,YAA/C,CAA5B,EAA0F;AACxFV,oBAAWE,QAAQQ,YAAnB,EAAiCR,OAAjC;AACD;;AAED,UAAIA,QAAQR,OAAR,IAAmB,MAAKW,UAAL,CAAgBM,WAAhB,CAA4B,SAA5B,EAAuCT,QAAQR,OAA/C,CAAvB,EAAgF;AAC9EM,oBAAWE,QAAQR,OAAnB,EAA4BQ,OAA5B;AACD;AACF,KARD;AASD;;AAED,MAAIT,UAAUE,KAAV,IAAmBF,UAAUE,KAAV,CAAgBC,WAAnC,IAAkDH,UAAUE,KAAV,CAAgBC,WAAhB,CAA4BF,OAA5B,CAAtD,EAA4F;AAC1F,WAAOD,UAAUE,KAAV,CAAgBC,WAAhB,CAA4BF,OAA5B,CAAP;AACD,GAFD,MAEO;AACL,WAAO,EAAP;AACD;AACF","file":"getMessage.js","sourcesContent":["import update from 'immutability-helper';\n\n/**\n * Add a channel to the state pn_messages\n *\n * @param {PubNubReact} instance\n * @param {string} channel\n * @returns {boolean}\n */\nfunction init(component, channel) {\n  if (component.state.pn_messages[channel]) {\n    return false;\n  } else {\n    component.setState(prevState => ({\n      pn_messages: update(prevState.pn_messages, { $merge: { [channel]: [] } })\n    }));\n\n    return true;\n  }\n}\n\n/**\n * Emit a message through a callback and update the state\n *\n * @param {PubNubReact} instance\n * @param {string} channel\n * @param {object} message\n */\nfunction emit(instance, channel, message) {\n  instance._component.setState(prevState => ({\n    pn_messages: update(prevState.pn_messages, { [channel]: { $push: [message] } })\n  }));\n\n  instance._broadcast.emit('message', channel, message);\n}\n\n/**\n * Get to receive messages from a channel through a callback\n *\n * @param {string} channel\n * @param {function} callback\n * @returns {[]}\n */\nexport function getMessage(channel, callback) {\n  let component = this._component;\n\n  if (init(component, channel)) {\n    this._autoload.getHistory(channel, callback);\n  }\n\n  this._broadcast.message(channel, callback);\n\n  if (!this._listener.message) {\n    this._listener.message = (message) => {\n      if (message.subscription && this._broadcast.isSubscribe('message', message.subscription)) {\n        emit(this, message.subscription, message);\n      }\n\n      if (message.channel && this._broadcast.isSubscribe('message', message.channel)) {\n        emit(this, message.channel, message);\n      }\n    };\n  }\n\n  if (component.state && component.state.pn_messages && component.state.pn_messages[channel]) {\n    return component.state.pn_messages[channel];\n  } else {\n    return [];\n  }\n}\n"]}