{"version":3,"sources":["modules/getPresence.js"],"names":["getPresence","init","instance","channel","_component","state","pn_presence","setState","prevState","$merge","emit","presence","$set","_broadcast","callback","_listener","ps","subscription","isSubscribe"],"mappings":";;;;;QA4CgBA,W,GAAAA,W;;AA5ChB;;;;;;;;AASA,SAASC,IAAT,CAAcC,QAAd,EAAwBC,OAAxB,EAAiC;AAC/B,MAAID,SAASE,UAAT,CAAoBC,KAApB,CAA0BC,WAA1B,CAAsCH,OAAtC,CAAJ,EAAoD;AAClD,WAAO,KAAP;AACD;;AAEDD,WAASE,UAAT,CAAoBG,QAApB,CAA6B;AAAA,WAAc;AACzCD,mBAAa,kCAAOE,UAAUF,WAAjB,EAA8B,EAAEG,4BAAWN,OAAX,EAAqB,EAArB,CAAF,EAA9B;AAD4B,KAAd;AAAA,GAA7B;;AAIA,SAAO,IAAP;AACD;;AASD,SAASO,IAAT,CAAcR,QAAd,EAAwBC,OAAxB,EAAiCQ,QAAjC,EAA2C;AACzCT,WAASE,UAAT,CAAoBG,QAApB,CAA6B;AAAA,WAAc;AACzCD,mBAAa,kCAAOE,UAAUF,WAAjB,sBAAiCH,OAAjC,EAA2C,EAAES,MAAMD,QAAR,EAA3C;AAD4B,KAAd;AAAA,GAA7B;;AAIAT,WAASW,UAAT,CAAoBH,IAApB,CAAyB,UAAzB,EAAqCC,SAASR,OAA9C,EAAuDQ,QAAvD;AACD;;AAUM,SAASX,WAAT,CAAqBG,OAArB,EAA8BW,QAA9B,EAAwC;AAAA;;AAC7C,OAAKD,UAAL,CAAgBF,QAAhB,CAAyBR,OAAzB,EAAkCW,QAAlC;;AAEAb,OAAK,IAAL,EAAWE,OAAX;;AAEA,MAAI,CAAC,KAAKY,SAAL,CAAeJ,QAApB,EAA8B;AAC5B,SAAKI,SAAL,CAAeJ,QAAf,GAA0B,UAACK,EAAD,EAAQ;AAChC,UAAIA,GAAGC,YAAH,IAAmB,MAAKJ,UAAL,CAAgBK,WAAhB,CAA4B,UAA5B,EAAwCF,GAAGC,YAA3C,CAAvB,EAAiF;AAC/EP,oBAAWM,GAAGC,YAAd,EAA4BD,EAA5B;AACD;;AAED,UAAIA,GAAGb,OAAH,IAAc,MAAKU,UAAL,CAAgBK,WAAhB,CAA4B,UAA5B,EAAwCF,GAAGb,OAA3C,CAAlB,EAAuE;AACrEO,oBAAWM,GAAGb,OAAd,EAAuBa,EAAvB;AACD;AACF,KARD;AASD;;AAED,MAAI,KAAKZ,UAAL,CAAgBC,KAAhB,IAAyB,KAAKD,UAAL,CAAgBC,KAAhB,CAAsBC,WAAnD,EAAgE;AAC9D,WAAO,KAAKF,UAAL,CAAgBC,KAAhB,CAAsBC,WAAtB,CAAkCH,OAAlC,CAAP;AACD,GAFD,MAEO;AACL,WAAO,EAAP;AACD;AACF","file":"getPresence.js","sourcesContent":["import update from 'immutability-helper';\n\n/**\n * Add a channel to the state pn_presence\n *\n * @param {PubNubReact} instance\n * @param {string} channel\n * @returns {boolean}\n */\nfunction init(instance, channel) {\n  if (instance._component.state.pn_presence[channel]) {\n    return false;\n  }\n\n  instance._component.setState(prevState => ({\n    pn_presence: update(prevState.pn_presence, { $merge: { [channel]: {} } })\n  }));\n\n  return true;\n}\n\n/**\n * Emit a presence information through a callback and update the state\n *\n * @param {PubNubReact} instance\n * @param {string} channel\n * @param {object} presence\n */\nfunction emit(instance, channel, presence) {\n  instance._component.setState(prevState => ({\n    pn_presence: update(prevState.pn_presence, { [channel]: { $set: presence } })\n  }));\n\n  instance._broadcast.emit('presence', presence.channel, presence);\n}\n\n\n/**\n * Get to receive presence information from a channel through a callback\n *\n * @param {string} channel\n * @param {function} callback\n * @returns {object}\n */\nexport function getPresence(channel, callback) {\n  this._broadcast.presence(channel, callback);\n\n  init(this, channel);\n\n  if (!this._listener.presence) {\n    this._listener.presence = (ps) => {\n      if (ps.subscription && this._broadcast.isSubscribe('presence', ps.subscription)) {\n        emit(this, ps.subscription, ps);\n      }\n\n      if (ps.channel && this._broadcast.isSubscribe('presence', ps.channel)) {\n        emit(this, ps.channel, ps);\n      }\n    };\n  }\n\n  if (this._component.state && this._component.state.pn_presence) {\n    return this._component.state.pn_presence[channel];\n  } else {\n    return {};\n  }\n}\n"]}