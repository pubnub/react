{"version":3,"sources":["autoload.js"],"names":["count","instance","undefined","args","autoload","channels","forEach","channel","callback","history","then","response","messages","m","message","entry","_component","setState","pn_messages","prevState","$push","catch","Array","isArray","ch"],"mappings":";;;;;;;;AAAA;;;;;;;;;;;AAGE,oBAAc;AAAA;;AACZ,SAAKA,KAAL,GAAa,EAAb;AACA,SAAKC,QAAL,GAAgBC,SAAhB;AACD;;;;+BAOUD,Q,EAAU;AACnB,WAAKA,QAAL,GAAgBA,QAAhB;AACD;;;+BAOUE,I,EAAM;AAAA;;AACf,UAAI,KAAKF,QAAL,IAAiBE,KAAKC,QAAtB,IAAkC,OAAOD,KAAKC,QAAZ,KAAyB,QAA/D,EAAyE;AACvE,aAAKJ,KAAL,CAAWG,KAAKE,QAAhB,IAA4BF,KAAKC,QAAjC;;AAEAD,aAAKE,QAAL,CAAcC,OAAd,CAAsB,UAACC,OAAD,EAAa;AACjC,gBAAKP,KAAL,CAAWO,OAAX,IAAsBJ,KAAKC,QAA3B;AACD,SAFD;AAGD;AACF;;;+BAQUG,O,EAASC,Q,EAAU;AAAA;;AAC5B,UAAI,KAAKR,KAAL,CAAWO,OAAX,CAAJ,EAAyB;AACvB,aAAKN,QAAL,CAAcQ,OAAd,CAAsB,EAAEF,SAASA,OAAX,EAAoBP,OAAO,KAAKA,KAAL,CAAWO,OAAX,CAA3B,EAAtB,EAAwEG,IAAxE,CAA6E,UAACC,QAAD,EAAc;AACzFA,mBAASC,QAAT,CAAkBN,OAAlB,CAA0B,UAACO,CAAD,EAAO;AAC/BA,cAAEC,OAAF,GAAYD,EAAEE,KAAd;AACAF,cAAEN,OAAF,GAAYA,OAAZ;;AAEA,mBAAKN,QAAL,CAAce,UAAd,CAAyBC,QAAzB,CAAkC;AAAA,qBAAc;AAC9CC,6BAAa,kCAAOC,UAAUD,WAAjB,sBAAiCX,OAAjC,EAA2C,EAAEa,OAAO,CAACP,CAAD,CAAT,EAA3C;AADiC,eAAd;AAAA,aAAlC;AAGD,WAPD;;AASA,cAAIL,QAAJ,EAAc;AACZA;AACD;AACF,SAbD,EAaGa,KAbH,CAaS,YAAM,CAAE,CAbjB;AAcD;AACF;;;gCAOWlB,I,EAAM;AAAA;;AAChB,UAAImB,MAAMC,OAAN,CAAcpB,KAAKE,QAAnB,CAAJ,EAAkC;AAChCF,aAAKE,QAAL,CAAcC,OAAd,CAAsB,UAACkB,EAAD,EAAQ;AAC5B,cAAI,OAAKxB,KAAL,CAAWwB,EAAX,CAAJ,EAAoB,OAAO,OAAKxB,KAAL,CAAWwB,EAAX,CAAP;AACrB,SAFD;AAGD,OAJD,MAIO,IAAI,KAAKxB,KAAL,CAAWG,KAAKE,QAAhB,CAAJ,EAA+B;AACpC,eAAO,KAAKL,KAAL,CAAWG,KAAKE,QAAhB,CAAP;AACD;AACF","file":"autoload.js","sourcesContent":["import update from 'immutability-helper';\n\nexport default class {\n  constructor() {\n    this.count = {};\n    this.instance = undefined;\n  }\n\n  /**\n   * Initialize the autoload with a wrapper instance\n   *\n   * @param instance\n   */\n  initialize(instance) {\n    this.instance = instance;\n  }\n\n  /**\n   * Enable the autoload for a channel or a set of channels subscribed\n   *\n   * @param args\n   */\n  enableLoad(args) {\n    if (this.instance && args.autoload && typeof args.autoload === 'number') {\n      this.count[args.channels] = args.autoload;\n\n      args.channels.forEach((channel) => {\n        this.count[channel] = args.autoload;\n      });\n    }\n  }\n\n  /**\n   * Get history of a channel or a set of channels.\n   *\n   * @param {string|[string]} channel\n   * @param callback\n   */\n  getHistory(channel, callback) {\n    if (this.count[channel]) {\n      this.instance.history({ channel: channel, count: this.count[channel] }).then((response) => {\n        response.messages.forEach((m) => {\n          m.message = m.entry;\n          m.channel = channel;\n\n          this.instance._component.setState(prevState => ({\n            pn_messages: update(prevState.pn_messages, { [channel]: { $push: [m] } })\n          }));\n        });\n\n        if (callback) {\n          callback();\n        }\n      }).catch(() => {});\n    }\n  }\n\n  /**\n   * Disable the autoload for a channel or set of channels\n   *\n   * @param args\n   */\n  disableLoad(args) {\n    if (Array.isArray(args.channels)) {\n      args.channels.forEach((ch) => {\n        if (this.count[ch]) delete this.count[ch];\n      });\n    } else if (this.count[args.channels]) {\n      delete this.count[args.channels];\n    }\n  }\n}\n"]}